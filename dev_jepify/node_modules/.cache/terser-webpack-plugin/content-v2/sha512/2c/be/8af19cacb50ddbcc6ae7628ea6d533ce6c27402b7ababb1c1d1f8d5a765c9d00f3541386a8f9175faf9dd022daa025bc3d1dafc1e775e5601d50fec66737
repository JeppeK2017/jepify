{"map":"{\"version\":3,\"sources\":[\"/home/jeppe/dev/my-app/node_modules/file-loader/dist/cjs.js??ref--6-oneOf-7!/home/jeppe/dev/my-app/src/logo.svg\",\"/home/jeppe/dev/my-app/src/components/jepifier.jsx\",\"/home/jeppe/dev/my-app/src/App.js\",\"/home/jeppe/dev/my-app/src/serviceWorker.js\",\"/home/jeppe/dev/my-app/src/index.js\"],\"names\":[\"module\",\"exports\",\"__webpack_require__\",\"p\",\"Jepifier\",\"_useState\",\"useState\",\"_useState2\",\"Object\",\"slicedToArray\",\"currentString\",\"updateString\",\"react_default\",\"a\",\"createElement\",\"placeholder\",\"value\",\"onChange\",\"e\",\"target\",\"text\",\"result\",\"inputStringArray\",\"split\",\"length\",\"firstString\",\"shift\",\"toLowerCase\",\"camelWords\",\"map\",\"s\",\"charAt\",\"toUpperCase\",\"substring\",\"join\",\"pop\",\"jepify\",\"App\",\"className\",\"src\",\"logo\",\"alt\",\"Boolean\",\"window\",\"location\",\"hostname\",\"match\",\"ReactDOM\",\"render\",\"src_App\",\"document\",\"getElementById\",\"navigator\",\"serviceWorker\",\"ready\",\"then\",\"registration\",\"unregister\"],\"mappings\":\"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,4NCGzB,SAASC,IAAW,IAAAC,EACGC,OAAAA,EAAAA,SAAAA,CAAS,IADZC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAC5BK,EAD4BH,EAAA,GACbI,EADaJ,EAAA,GAGjC,OACEK,EAAAC,EAAAC,cAAA,MAAA,KACEF,EAAAC,EAAAC,cAAA,QAAA,CACEC,YAAY,mBACZC,MAAON,EACPO,SAAU,SAAAC,GAAC,OAAIP,EAAaO,EAAEC,OAAOH,UAEvCJ,EAAAC,EAAAC,cAAA,KAAA,KAKN,SAAgBM,GACd,IAEIC,EAFAC,EAAmBF,EAAKG,MAAM,KAIlC,GAAID,EAAiBE,OAAS,EAAG,CAC/B,IAAIC,EAAcH,EAAiBI,QAAQC,cAEvCC,EAAaN,EACdO,IAAI,SAAAC,GAAC,OAAIA,EAAEC,OAAO,GAAGC,cAAgBF,EAAEG,UAAU,KACjDC,KAAK,IAERb,EAAS,IAAMI,EAAcG,EAAa,WAE1CP,EAAS,IAAMC,EAAiBa,MAAMR,cAAgB,MAGxD,OAAON,EAtBEe,CAAO1B,KCGH2B,IAAAA,EAXf,WACE,OACEzB,EAAAC,EAAAC,cAAA,MAAA,CAAKwB,UAAU,OACb1B,EAAAC,EAAAC,cAAA,SAAA,CAAQwB,UAAU,cAChB1B,EAAAC,EAAAC,cAAA,MAAA,CAAKyB,IAAKC,EAAAA,EAAMF,UAAU,WAAWG,IAAI,SACzC7B,EAAAC,EAAAC,cAACV,EAAD,SCEYsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,EAAAA,EAASC,OAAOpC,EAAAC,EAAAC,cAACmC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC\",\"sourcesContent\":[\"module.exports = __webpack_public_path__ + \\\"static/media/logo.5d5d9eef.svg\\\";\",\"import React from \\\"react\\\";\\nimport { useState } from \\\"react\\\";\\n\\nexport default function Jepifier() {\\n  var [currentString, updateString] = useState(\\\"\\\");\\n\\n  return (\\n    <div>\\n      <input\\n        placeholder=\\\"Insert text here\\\"\\n        value={currentString}\\n        onChange={e => updateString(e.target.value)}\\n      />\\n      <h2>{jepify(currentString)}</h2>\\n    </div>\\n  );\\n}\\n\\nfunction jepify(text) {\\n  var inputStringArray = text.split(\\\" \\\");\\n\\n  var result;\\n\\n  if (inputStringArray.length > 1) {\\n    var firstString = inputStringArray.shift().toLowerCase();\\n\\n    var camelWords = inputStringArray\\n      .map(s => s.charAt(0).toUpperCase() + s.substring(1))\\n      .join(\\\"\\\");\\n\\n    result = \\\"#\\\" + firstString + camelWords + \\\"Jep\\\";\\n  } else {\\n    result = \\\"#\\\" + inputStringArray.pop().toLowerCase() + \\\"Jep\\\";\\n  }\\n\\n  return result;\\n}\\n\",\"import React from \\\"react\\\";\\nimport logo from \\\"./logo.svg\\\";\\nimport \\\"./css/App.css\\\";\\nimport Jepifier from \\\"./components/jepifier\\\";\\n\\nfunction App() {\\n  return (\\n    <div className=\\\"App\\\">\\n      <header className=\\\"App-header\\\">\\n        <img src={logo} className=\\\"App-logo\\\" alt=\\\"logo\\\" />\\n        <Jepifier />\\n      </header>\\n    </div>\\n  );\\n}\\n\\nexport default App;\\n\",\"// This optional code is used to register a service worker.\\n// register() is not called by default.\\n\\n// This lets the app load faster on subsequent visits in production, and gives\\n// it offline capabilities. However, it also means that developers (and users)\\n// will only see deployed updates on subsequent visits to a page, after all the\\n// existing tabs open on the page have been closed, since previously cached\\n// resources are updated in the background.\\n\\n// To learn more about the benefits of this model and instructions on how to\\n// opt-in, read https://bit.ly/CRA-PWA\\n\\nconst isLocalhost = Boolean(\\n  window.location.hostname === 'localhost' ||\\n    // [::1] is the IPv6 localhost address.\\n    window.location.hostname === '[::1]' ||\\n    // 127.0.0.1/8 is considered localhost for IPv4.\\n    window.location.hostname.match(\\n      /^127(?:\\\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\\n    )\\n);\\n\\nexport function register(config) {\\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\\n    // The URL constructor is available in all browsers that support SW.\\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\\n    if (publicUrl.origin !== window.location.origin) {\\n      // Our service worker won't work if PUBLIC_URL is on a different origin\\n      // from what our page is served on. This might happen if a CDN is used to\\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\\n      return;\\n    }\\n\\n    window.addEventListener('load', () => {\\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\\n\\n      if (isLocalhost) {\\n        // This is running on localhost. Let's check if a service worker still exists or not.\\n        checkValidServiceWorker(swUrl, config);\\n\\n        // Add some additional logging to localhost, pointing developers to the\\n        // service worker/PWA documentation.\\n        navigator.serviceWorker.ready.then(() => {\\n          console.log(\\n            'This web app is being served cache-first by a service ' +\\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\\n          );\\n        });\\n      } else {\\n        // Is not localhost. Just register service worker\\n        registerValidSW(swUrl, config);\\n      }\\n    });\\n  }\\n}\\n\\nfunction registerValidSW(swUrl, config) {\\n  navigator.serviceWorker\\n    .register(swUrl)\\n    .then(registration => {\\n      registration.onupdatefound = () => {\\n        const installingWorker = registration.installing;\\n        if (installingWorker == null) {\\n          return;\\n        }\\n        installingWorker.onstatechange = () => {\\n          if (installingWorker.state === 'installed') {\\n            if (navigator.serviceWorker.controller) {\\n              // At this point, the updated precached content has been fetched,\\n              // but the previous service worker will still serve the older\\n              // content until all client tabs are closed.\\n              console.log(\\n                'New content is available and will be used when all ' +\\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\\n              );\\n\\n              // Execute callback\\n              if (config && config.onUpdate) {\\n                config.onUpdate(registration);\\n              }\\n            } else {\\n              // At this point, everything has been precached.\\n              // It's the perfect time to display a\\n              // \\\"Content is cached for offline use.\\\" message.\\n              console.log('Content is cached for offline use.');\\n\\n              // Execute callback\\n              if (config && config.onSuccess) {\\n                config.onSuccess(registration);\\n              }\\n            }\\n          }\\n        };\\n      };\\n    })\\n    .catch(error => {\\n      console.error('Error during service worker registration:', error);\\n    });\\n}\\n\\nfunction checkValidServiceWorker(swUrl, config) {\\n  // Check if the service worker can be found. If it can't reload the page.\\n  fetch(swUrl)\\n    .then(response => {\\n      // Ensure service worker exists, and that we really are getting a JS file.\\n      const contentType = response.headers.get('content-type');\\n      if (\\n        response.status === 404 ||\\n        (contentType != null && contentType.indexOf('javascript') === -1)\\n      ) {\\n        // No service worker found. Probably a different app. Reload the page.\\n        navigator.serviceWorker.ready.then(registration => {\\n          registration.unregister().then(() => {\\n            window.location.reload();\\n          });\\n        });\\n      } else {\\n        // Service worker found. Proceed as normal.\\n        registerValidSW(swUrl, config);\\n      }\\n    })\\n    .catch(() => {\\n      console.log(\\n        'No internet connection found. App is running in offline mode.'\\n      );\\n    });\\n}\\n\\nexport function unregister() {\\n  if ('serviceWorker' in navigator) {\\n    navigator.serviceWorker.ready.then(registration => {\\n      registration.unregister();\\n    });\\n  }\\n}\\n\",\"import React from \\\"react\\\";\\nimport ReactDOM from \\\"react-dom\\\";\\nimport \\\"./css/index.css\\\";\\nimport App from \\\"./App\\\";\\nimport * as serviceWorker from \\\"./serviceWorker\\\";\\n\\nReactDOM.render(<App />, document.getElementById(\\\"root\\\"));\\n\\n// If you want your app to work offline and load faster, you can change\\n// unregister() to register() below. Note this comes with some pitfalls.\\n// Learn more about service workers: https://bit.ly/CRA-PWA\\nserviceWorker.unregister();\\n\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[0],[,,,function(e,t,n){e.exports=n.p+\"static/media/logo.5d5d9eef.svg\"},,function(e,t,n){e.exports=n(13)},,,,,,function(e,t,n){},function(e,t,n){},function(e,t,n){\"use strict\";n.r(t);var a=n(0),o=n.n(a),r=n(2),c=n.n(r),i=(n(11),n(3)),l=n.n(i),s=(n(12),n(4));function u(){var e=Object(a.useState)(\"\"),t=Object(s.a)(e,2),n=t[0],r=t[1];return o.a.createElement(\"div\",null,o.a.createElement(\"input\",{placeholder:\"Insert text here\",value:n,onChange:function(e){return r(e.target.value)}}),o.a.createElement(\"h2\",null,function(e){var t,n=e.split(\" \");if(n.length>1){var a=n.shift().toLowerCase(),o=n.map(function(e){return e.charAt(0).toUpperCase()+e.substring(1)}).join(\"\");t=\"#\"+a+o+\"Jep\"}else t=\"#\"+n.pop().toLowerCase()+\"Jep\";return t}(n)))}var p=function(){return o.a.createElement(\"div\",{className:\"App\"},o.a.createElement(\"header\",{className:\"App-header\"},o.a.createElement(\"img\",{src:l.a,className:\"App-logo\",alt:\"logo\"}),o.a.createElement(u,null)))};Boolean(\"localhost\"===window.location.hostname||\"[::1]\"===window.location.hostname||window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));c.a.render(o.a.createElement(p,null),document.getElementById(\"root\")),\"serviceWorker\"in navigator&&navigator.serviceWorker.ready.then(function(e){e.unregister()})}],[[5,1,2]]]);","extractedComments":[]}